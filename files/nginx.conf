user  nginx;
worker_processes  1;

events {
    worker_connections  1024;
}

http {
  include       mime.types;
  default_type  application/octet-stream;

  keepalive_timeout 65;
  sendfile on;

  proxy_cache_path /cache/cache levels=1:2 keys_zone=cache:16m inactive=1y max_size=CACHE_MAX_SIZE use_temp_path=off;
  resolver RESOLVER valid=30s;

  proxy_http_version 1.1;

  lua_shared_dict token_dict 1m;

  init_by_lua_block {
    local cjson = require "cjson"

    -- Load token
    local token_file = io.open('/usr/local/openresty/nginx/token.txt', 'r')
    if token_file then
      local data = token_file:read()
      ngx.shared.token_dict:set("ecr_token", data)
      token_file:close()
    else
      ngx.log(ngx.ERR, "Failed to open token file: /usr/local/openresty/nginx/token.txt")
    end

    -- Load allowed repositories from JSON
    local json_file = io.open('/etc/nginx/config/allowed_repos.json', 'r')
    if json_file then
      local json_content = json_file:read("*all")
      json_file:close()
      local parsed = cjson.decode(json_content)
      for _, repo in ipairs(parsed.allowed) do
        ngx.shared.token_dict:set("repo_" .. repo, true)
      end
    else
      ngx.log(ngx.ERR, "Failed to open allowed_repos.json")
    end
  }

  map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
    '' 'registry/2.0';
  }

  server {
    listen PORT SSL_LISTEN default_server;

    set_by_lua_block $http_authorization {
        return ngx.shared.token_dict:get("ecr_token")
    }

    SSL_INCLUDE

    add_header X-Cache-Status   $upstream_cache_status;
    proxy_temp_path /cache/temp 1 2;
    proxy_ignore_headers        Cache-Control;
    client_max_body_size 0;
    chunked_transfer_encoding on;
    proxy_connect_timeout  3s;
    proxy_read_timeout     300s;
    proxy_send_timeout     300s;
    send_timeout           300s;
    proxy_request_buffering off;
    add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;
    add_header "Access-Control-Allow-Origin" "*";

    location /healthz {
      return 200;
    }

    location / {
      rewrite_by_lua_block {
        local uri = ngx.var.uri
        local repo = uri:match("^/v2/([^/]+)/")
        if repo then
          local allowed = ngx.shared.token_dict:get("repo_" .. repo)
          if not allowed then
            ngx.status = 403
            ngx.say("Repository access denied: " .. repo)
            return ngx.exit(403)
          end
        end
      }

      set $url UPSTREAM;
      proxy_pass $url;
      proxy_redirect $url SCHEME://$host:PORT;

      proxy_set_header  X-Real-IP          $remote_addr;
      proxy_set_header  X-Forwarded-For    $remote_addr;
      proxy_set_header  X-Forwarded-User   "Basic $http_authorization";
      proxy_set_header  Authorization      "Basic $http_authorization";
      proxy_set_header  X-Forwarded-Proto  $scheme;
    }

    location ~ ^/v2/.*/blobs/[a-z0-9]+:[a-f0-9]+$ {
      rewrite_by_lua_block {
        local uri = ngx.var.uri
        local repo = uri:match("^/v2/([^/]+)/")
        if repo then
          local allowed = ngx.shared.token_dict:get("repo_" .. repo)
          if not allowed then
            ngx.status = 403
            ngx.say("Repository access denied: " .. repo)
            return ngx.exit(403)
          end
        end
      }

      set $url UPSTREAM;
      proxy_pass $url;
      proxy_redirect $url SCHEME://$host:PORT;

      proxy_set_header  X-Real-IP          $remote_addr;
      proxy_set_header  X-Forwarded-For    $remote_addr;
      proxy_set_header  X-Forwarded-User   "Basic $http_authorization";
      proxy_set_header  Authorization      "Basic $http_authorization";
      proxy_set_header  X-Forwarded-Proto  $scheme;

      proxy_intercept_errors    on;
      error_page 301 302 307 =  @handle_redirect;
    }

    location @handle_redirect {
      set $saved_redirect_location '$upstream_http_location';
      proxy_pass $saved_redirect_location;
      proxy_cache cache;
      proxy_cache_key CACHE_KEY;
      proxy_cache_valid 200 1y;
      proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
      proxy_cache_lock on;
    }

    location ~ ^/v2/.*/.*/tags/list+$ {
      rewrite_by_lua_block {
        local uri = ngx.var.uri
        local repo = uri:match("^/v2/([^/]+)/")
        if repo then
          local allowed = ngx.shared.token_dict:get("repo_" .. repo)
          if not allowed then
            ngx.status = 403
            ngx.say("Repository access denied: " .. repo)
            return ngx.exit(403)
          end
        end
      }

      content_by_lua_block {
        local location, tags, cjson = ngx.var.uri, {}, require "cjson"
        while true do
          local res = ngx.location.capture("/get_tags", { args = { req_uri = location } })
          if res.status == ngx.HTTP_NOT_FOUND and #tags == 0 then
            ngx.status = ngx.HTTP_NOT_FOUND
            ngx.print(res.body)
            ngx.exit(0)
          end
          local data = cjson.decode(res.body)
          for _,v in ipairs(data['tags']) do
            table.insert(tags, v)
          end
          if res.header["Link"] then
            location = res.header["Link"]:match("/v2[^>]+")
          else
            ngx.print(cjson.encode{name = data['name'], tags = tags })
            ngx.exit(ngx.HTTP_OK)
          end
        end
      }
    }

    location /get_tags {
      rewrite_by_lua_block {
        local uri = ngx.var.uri
        local repo = uri:match("^/v2/([^/]+)/")
        if repo then
          local allowed = ngx.shared.token_dict:get("repo_" .. repo)
          if not allowed then
            ngx.status = 403
            ngx.say("Repository access denied: " .. repo)
            return ngx.exit(403)
          end
        end
      }

      internal;
      set_unescape_uri $req_uri $arg_req_uri;
      proxy_pass UPSTREAM$req_uri;

      proxy_set_header  X-Real-IP          $remote_addr;
      proxy_set_header  X-Forwarded-For    $remote_addr;
      proxy_set_header  X-Forwarded-User   "Basic $http_authorization";
      proxy_set_header  Authorization      "Basic $http_authorization";
      proxy_set_header  X-Forwarded-Proto  $scheme;
    }
  }
}
